2021-03-29 17:51:09,600 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.10 |Anaconda, Inc.| (default, Mar 23 2020, 23:13:11) [GCC 7.3.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.0_bu.TC445_37.28358933_0
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.6.0a0+9907a3e
PyTorch compiling details: PyTorch built with:
  - GCC 7.5
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.1 Product Build 20180928 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.2.0 (Git Hash N/A)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_52,code=sm_52;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_80,code=compute_80
  - CuDNN 8.0.1
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=ON, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0a0
OpenCV: 3.4.1
MMCV: 1.2.7
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.0
MMSegmentation: 0.11.0+d0a71c1
------------------------------------------------------------

2021-03-29 17:51:09,600 - mmseg - INFO - Distributed training: False
2021-03-29 17:51:09,989 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict(type='Fp16OptimizerHook', loss_scale=512.0)
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=80000)
checkpoint_config = dict(by_epoch=False, interval=4000)
evaluation = dict(interval=4000, metric='mIoU')
work_dir = './work_dirs/deeplabv3plus_r50-d8_512x1024_80k_fp16_cityscapes'
gpu_ids = range(0, 1)

2021-03-29 17:51:11,759 - mmseg - INFO - Use load_from_openmmlab loader
Downloading: "https://download.openmmlab.com/pretrain/third_party/resnet50_v1c-2cccc1ad.pth" to /root/.cache/torch/checkpoints/resnet50_v1c-2cccc1ad.pth

  0%|          | 0.00/97.8M [00:00<?, ?B/s]
  0%|          | 16.0k/97.8M [00:00<21:48, 78.4kB/s]
  0%|          | 40.0k/97.8M [00:00<19:39, 86.9kB/s]
  0%|          | 96.0k/97.8M [00:00<15:38, 109kB/s] 
  0%|          | 208k/97.8M [00:00<11:52, 144kB/s] 
  0%|          | 432k/97.8M [00:01<08:45, 194kB/s]
  1%|          | 872k/97.8M [00:01<06:20, 267kB/s]
  2%|▏         | 1.72M/97.8M [00:01<04:31, 372kB/s]
  4%|▎         | 3.45M/97.8M [00:01<03:09, 521kB/s]
  6%|▌         | 5.93M/97.8M [00:01<02:11, 731kB/s]
  8%|▊         | 7.98M/97.8M [00:02<01:31, 1.03MB/s]
  9%|▉         | 9.03M/97.8M [00:02<01:06, 1.40MB/s]
 11%|█         | 10.6M/97.8M [00:02<00:47, 1.92MB/s]
 12%|█▏        | 11.8M/97.8M [00:02<00:35, 2.53MB/s]
 14%|█▎        | 13.3M/97.8M [00:02<00:26, 3.38MB/s]
 15%|█▍        | 14.5M/97.8M [00:02<00:21, 4.15MB/s]
 16%|█▌        | 15.9M/97.8M [00:02<00:17, 5.03MB/s]
 18%|█▊        | 17.5M/97.8M [00:02<00:13, 6.35MB/s]
 19%|█▉        | 18.7M/97.8M [00:02<00:11, 7.02MB/s]
 21%|██        | 20.4M/97.8M [00:03<00:09, 8.54MB/s]
 22%|██▏       | 21.6M/97.8M [00:03<00:09, 8.83MB/s]
 24%|██▎       | 23.2M/97.8M [00:03<00:07, 10.3MB/s]
 25%|██▌       | 24.5M/97.8M [00:03<00:07, 9.96MB/s]
 26%|██▌       | 25.7M/97.8M [00:03<00:07, 10.2MB/s]
 27%|██▋       | 26.8M/97.8M [00:03<00:07, 10.4MB/s]
 29%|██▊       | 27.9M/97.8M [00:03<00:06, 10.7MB/s]
 30%|██▉       | 29.0M/97.8M [00:03<00:06, 10.5MB/s]
 31%|███       | 30.4M/97.8M [00:04<00:06, 11.5MB/s]
 32%|███▏      | 31.6M/97.8M [00:04<00:06, 11.1MB/s]
 34%|███▍      | 33.0M/97.8M [00:04<00:05, 12.1MB/s]
 35%|███▌      | 34.3M/97.8M [00:04<00:05, 11.5MB/s]
 36%|███▋      | 35.6M/97.8M [00:04<00:05, 12.3MB/s]
 38%|███▊      | 36.9M/97.8M [00:04<00:06, 10.5MB/s]
 39%|███▉      | 38.0M/97.8M [00:04<00:05, 10.9MB/s]
 40%|████      | 39.3M/97.8M [00:04<00:05, 11.4MB/s]
 41%|████▏     | 40.4M/97.8M [00:04<00:05, 11.6MB/s]
 43%|████▎     | 41.7M/97.8M [00:05<00:04, 12.0MB/s]
 44%|████▍     | 42.9M/97.8M [00:05<00:04, 11.8MB/s]
 45%|████▌     | 44.0M/97.8M [00:05<00:04, 11.7MB/s]
 46%|████▌     | 45.1M/97.8M [00:05<00:05, 9.48MB/s]
 47%|████▋     | 46.1M/97.8M [00:05<00:07, 7.39MB/s]
 48%|████▊     | 47.0M/97.8M [00:05<00:09, 5.42MB/s]
 49%|████▊     | 47.6M/97.8M [00:06<00:15, 3.39MB/s]
 49%|████▉     | 48.1M/97.8M [00:06<00:28, 1.85MB/s]
 50%|████▉     | 48.5M/97.8M [00:07<00:30, 1.70MB/s]
 50%|█████     | 49.1M/97.8M [00:07<00:23, 2.17MB/s]
 51%|█████▏    | 50.3M/97.8M [00:07<00:17, 2.88MB/s]
 53%|█████▎    | 51.5M/97.8M [00:07<00:12, 3.75MB/s]
 54%|█████▍    | 52.7M/97.8M [00:07<00:10, 4.73MB/s]
 55%|█████▌    | 53.9M/97.8M [00:07<00:07, 5.81MB/s]
 56%|█████▌    | 55.0M/97.8M [00:07<00:06, 6.73MB/s]
 58%|█████▊    | 56.4M/97.8M [00:07<00:05, 8.00MB/s]
 59%|█████▉    | 57.5M/97.8M [00:08<00:04, 8.65MB/s]
 60%|█████▉    | 58.6M/97.8M [00:08<00:04, 9.29MB/s]
 61%|██████▏   | 60.0M/97.8M [00:08<00:03, 10.1MB/s]
 62%|██████▏   | 61.1M/97.8M [00:08<00:03, 10.6MB/s]
 64%|██████▍   | 62.4M/97.8M [00:08<00:03, 11.3MB/s]
 65%|██████▍   | 63.6M/97.8M [00:08<00:03, 11.3MB/s]
 66%|██████▋   | 64.9M/97.8M [00:08<00:02, 12.0MB/s]
 68%|██████▊   | 66.1M/97.8M [00:08<00:02, 11.8MB/s]
 69%|██████▉   | 67.5M/97.8M [00:08<00:02, 12.4MB/s]
 70%|███████   | 68.7M/97.8M [00:08<00:02, 12.0MB/s]
 71%|███████▏  | 69.9M/97.8M [00:09<00:02, 12.2MB/s]
 73%|███████▎  | 71.1M/97.8M [00:09<00:02, 12.0MB/s]
 74%|███████▍  | 72.2M/97.8M [00:09<00:02, 11.9MB/s]
 75%|███████▌  | 73.4M/97.8M [00:09<00:02, 11.9MB/s]
 76%|███████▌  | 74.5M/97.8M [00:09<00:02, 11.6MB/s]
 77%|███████▋  | 75.6M/97.8M [00:09<00:03, 7.05MB/s]
 78%|███████▊  | 76.5M/97.8M [00:09<00:03, 7.32MB/s]
 79%|███████▉  | 77.4M/97.8M [00:10<00:02, 7.52MB/s]
 80%|████████  | 78.5M/97.8M [00:10<00:02, 8.35MB/s]
 81%|████████▏ | 79.7M/97.8M [00:10<00:02, 9.32MB/s]
 83%|████████▎ | 80.9M/97.8M [00:10<00:01, 10.1MB/s]
 84%|████████▍ | 82.2M/97.8M [00:10<00:01, 10.8MB/s]
 85%|████████▌ | 83.4M/97.8M [00:10<00:01, 11.3MB/s]
 86%|████████▋ | 84.6M/97.8M [00:10<00:01, 10.6MB/s]
 88%|████████▊ | 85.6M/97.8M [00:11<00:02, 6.21MB/s]
 88%|████████▊ | 86.5M/97.8M [00:11<00:02, 4.54MB/s]
 90%|████████▉ | 87.6M/97.8M [00:11<00:01, 5.55MB/s]
 91%|█████████ | 88.6M/97.8M [00:11<00:01, 6.51MB/s]
 92%|█████████▏| 89.6M/97.8M [00:11<00:01, 7.27MB/s]
 93%|█████████▎| 90.5M/97.8M [00:11<00:00, 7.66MB/s]
 93%|█████████▎| 91.4M/97.8M [00:11<00:00, 7.61MB/s]
 94%|█████████▍| 92.2M/97.8M [00:12<00:00, 6.96MB/s]
 95%|█████████▌| 93.0M/97.8M [00:12<00:00, 6.71MB/s]
 96%|█████████▌| 93.9M/97.8M [00:12<00:00, 7.40MB/s]
 97%|█████████▋| 94.9M/97.8M [00:12<00:00, 8.05MB/s]
 98%|█████████▊| 95.8M/97.8M [00:12<00:00, 8.47MB/s]
 99%|█████████▉| 96.9M/97.8M [00:12<00:00, 9.12MB/s]
100%|██████████| 97.8M/97.8M [00:12<00:00, 8.11MB/s]
2021-03-29 17:51:27,596 - mmseg - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2021-03-29 17:51:27,602 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  (decode_head): DepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(560, 560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=560, bias=False)
          (bn): BatchNorm2d(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
)
2021-03-29 17:51:27,676 - mmseg - INFO - Loaded 2975 images
2021-03-29 17:51:29,973 - mmseg - INFO - Start running, host: root@yq01-sys-hic-k8s-v100-box-a225-0784.yq01.baidu.com, work_dir: /root/paddlejob/workspace/env_run/mmsegmentation/work_dirs/deeplabv3plus_r50-d8_512x1024_2k_fp16_cityscapes_singlegpu
2021-03-29 17:51:29,973 - mmseg - INFO - workflow: [('train', 1)], max: 80000 iters
-------Config------
-------------------
------META--------
{'env_info': 'sys.platform: linux\nPython: 3.6.10 |Anaconda, Inc.| (default, Mar 23 2020, 23:13:11) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.0_bu.TC445_37.28358933_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.6.0a0+9907a3e\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.5\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2019.0.1 Product Build 20180928 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.2.0 (Git Hash N/A)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_52,code=sm_52;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_80,code=compute_80\n  - CuDNN 8.0.1\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=ON, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.7.0a0\nOpenCV: 3.4.1\nMMCV: 1.2.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.0\nMMSegmentation: 0.11.0+d0a71c1', 'seed': None, 'exp_name': 'deeplabv3plus_r50-d8_512x1024_2k_fp16_cityscapes_singlegpu.py'}
2021-03-29 17:52:07,760 - mmseg - INFO - Iter [50/80000]	lr: 9.989e-03, eta: 8:21:18, time: 0.753, data_time: 0.018, memory: 18707, decode.loss_seg: 1.6708, decode.acc_seg: 46.5696, aux.loss_seg: 0.7669, aux.acc_seg: 40.4904, loss: 2.4377
2021-03-29 17:52:31,811 - mmseg - INFO - Iter [100/80000]	lr: 9.978e-03, eta: 6:50:16, time: 0.481, data_time: 0.008, memory: 18707, decode.loss_seg: 0.9856, decode.acc_seg: 65.5956, aux.loss_seg: 0.4797, aux.acc_seg: 60.9823, loss: 1.4654
2021-03-29 17:52:55,848 - mmseg - INFO - Iter [150/80000]	lr: 9.967e-03, eta: 6:19:36, time: 0.481, data_time: 0.008, memory: 18707, decode.loss_seg: 0.9908, decode.acc_seg: 66.8880, aux.loss_seg: 0.4476, aux.acc_seg: 63.0150, loss: 1.4384
2021-03-29 17:53:19,855 - mmseg - INFO - Iter [200/80000]	lr: 9.956e-03, eta: 6:03:57, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.9503, decode.acc_seg: 68.4596, aux.loss_seg: 0.4358, aux.acc_seg: 64.7748, loss: 1.3861
2021-03-29 17:53:43,913 - mmseg - INFO - Iter [250/80000]	lr: 9.945e-03, eta: 5:54:33, time: 0.481, data_time: 0.008, memory: 18707, decode.loss_seg: 0.9295, decode.acc_seg: 68.3686, aux.loss_seg: 0.4215, aux.acc_seg: 65.2613, loss: 1.3510
2021-03-29 17:54:07,879 - mmseg - INFO - Iter [300/80000]	lr: 9.933e-03, eta: 5:47:57, time: 0.479, data_time: 0.008, memory: 18707, decode.loss_seg: 0.6979, decode.acc_seg: 74.5426, aux.loss_seg: 0.3414, aux.acc_seg: 70.4489, loss: 1.0393
2021-03-29 17:54:31,871 - mmseg - INFO - Iter [350/80000]	lr: 9.922e-03, eta: 5:43:10, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.6626, decode.acc_seg: 74.2657, aux.loss_seg: 0.3170, aux.acc_seg: 71.1705, loss: 0.9796
2021-03-29 17:54:56,028 - mmseg - INFO - Iter [400/80000]	lr: 9.911e-03, eta: 5:39:45, time: 0.483, data_time: 0.008, memory: 18707, decode.loss_seg: 0.6883, decode.acc_seg: 73.7408, aux.loss_seg: 0.3494, aux.acc_seg: 69.1964, loss: 1.0376
2021-03-29 17:55:20,026 - mmseg - INFO - Iter [450/80000]	lr: 9.900e-03, eta: 5:36:46, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.6563, decode.acc_seg: 74.8341, aux.loss_seg: 0.3196, aux.acc_seg: 71.4760, loss: 0.9759
2021-03-29 17:55:44,022 - mmseg - INFO - Iter [500/80000]	lr: 9.889e-03, eta: 5:34:18, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.5701, decode.acc_seg: 77.5458, aux.loss_seg: 0.2771, aux.acc_seg: 74.4393, loss: 0.8473
2021-03-29 17:56:08,051 - mmseg - INFO - Iter [550/80000]	lr: 9.878e-03, eta: 5:32:15, time: 0.481, data_time: 0.008, memory: 18707, decode.loss_seg: 0.5045, decode.acc_seg: 79.2786, aux.loss_seg: 0.2621, aux.acc_seg: 75.5572, loss: 0.7665
2021-03-29 17:56:32,049 - mmseg - INFO - Iter [600/80000]	lr: 9.866e-03, eta: 5:30:26, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.5533, decode.acc_seg: 78.7330, aux.loss_seg: 0.2780, aux.acc_seg: 75.6865, loss: 0.8312
2021-03-29 17:56:56,023 - mmseg - INFO - Iter [650/80000]	lr: 9.855e-03, eta: 5:28:49, time: 0.479, data_time: 0.008, memory: 18707, decode.loss_seg: 0.5259, decode.acc_seg: 79.0081, aux.loss_seg: 0.2655, aux.acc_seg: 75.3957, loss: 0.7914
2021-03-29 17:57:20,009 - mmseg - INFO - Iter [700/80000]	lr: 9.844e-03, eta: 5:27:23, time: 0.480, data_time: 0.008, memory: 18707, decode.loss_seg: 0.5899, decode.acc_seg: 76.1351, aux.loss_seg: 0.2977, aux.acc_seg: 72.4417, loss: 0.8876
2021-03-29 17:57:44,753 - mmseg - INFO - Iter [750/80000]	lr: 9.833e-03, eta: 5:26:45, time: 0.495, data_time: 0.022, memory: 18707, decode.loss_seg: 0.4394, decode.acc_seg: 80.8970, aux.loss_seg: 0.2356, aux.acc_seg: 77.0345, loss: 0.6750
